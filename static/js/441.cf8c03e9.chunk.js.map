{"version":3,"file":"static/js/441.cf8c03e9.chunk.js","mappings":"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","sources":["features/Movies/MovieCard.tsx","features/Movies/MoviesFilter.tsx","features/Movies/Movies.tsx","hooks/useIntersectionObserver.ts"],"sourcesContent":["import { Link as RouterLink } from \"react-router-dom\";\nimport { memo } from \"react\";\n\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  IconButton,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\n\ninterface MovieCardProps {\n  id: number;\n  title: string;\n  popularity: number;\n  overview: string;\n  image?: string;\n  enableUserAction?: boolean;\n  onAddFavorite?(id: number): void;\n}\n\nfunction MovieCard({\n  id,\n  title,\n  overview,\n  popularity,\n  enableUserAction = false,\n  onAddFavorite,\n  image = \"./movie-thumb.png\",\n}: MovieCardProps) {\n  return (\n    <Card sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n      <CardMedia component=\"div\" image={image} sx={{ pt: \"56.25%\" }} />\n      <CardContent sx={{ flexGrow: 1 }}>\n        <Typography variant=\"h5\" gutterBottom>\n          {title}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {overview}\n        </Typography>\n        <Typography variant=\"button\" display=\"block\" mt={2}>\n          {popularity}\n        </Typography>\n      </CardContent>\n\n      <CardActions>\n        <Button component={RouterLink} to={`/movies/${id}`} color=\"secondary\">\n          Datails\n        </Button>\n        {enableUserAction && (\n          <Tooltip title=\"Add to favorite\">\n            <IconButton onClick={() => onAddFavorite?.(id)}>\n              <FavoriteIcon />\n            </IconButton>\n          </Tooltip>\n        )}\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default memo(MovieCard);\n","import { useMemo, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\n\nimport {\n  Autocomplete,\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Paper,\n  Skeleton,\n  TextField,\n  debounce,\n} from \"@mui/material\";\nimport FilterAltOutlinedIcon from \"@mui/icons-material/FilterAltOutlined\";\n\nimport { KeywordItem } from \"../../api/tmdbApi\";\nimport { useGetGenresQuery, useGetKeywordsQuery } from \"../../api/tmdbApi\";\n\nexport interface Filters {\n  keywords: KeywordItem[];\n  genres: number[];\n}\n\ninterface MoviesFilterProps {\n  onApply(filters: Filters): void;\n}\n\nexport function MoviesFilter({ onApply }: MoviesFilterProps) {\n  const [keywordsQuery, setKeywordsQuery] = useState<string>(\"\");\n  const { data: keywordsOptions = [], isLoading: keywordsLoading } = useGetKeywordsQuery(\n    keywordsQuery,\n    { skip: !keywordsQuery }\n  );\n  const { data: genres = [], isLoading: genresLoading } = useGetGenresQuery();\n\n  const { handleSubmit, control } = useForm<Filters>({\n    defaultValues: {\n      keywords: [],\n      genres: [],\n    },\n  });\n\n  const debouncedFetchKeywordsOptions = useMemo(\n    () =>\n      debounce((query: string) => {\n        setKeywordsQuery(query);\n      }, 1000),\n    []\n  );\n\n  return (\n    <Paper sx={{ m: 2, p: 0.5 }}>\n      <form onSubmit={handleSubmit(onApply)}>\n        <FormControl component=\"fieldset\" variant=\"standard\" sx={{ m: 2, display: \"block\" }}>\n          <Controller\n            name=\"keywords\"\n            control={control}\n            render={({ field: { onChange, value } }) => (\n              <Autocomplete\n                multiple\n                disablePortal\n                loading={keywordsLoading}\n                options={keywordsOptions}\n                filterOptions={(x) => x}\n                getOptionLabel={(option) => option.name}\n                onChange={(_, value) => onChange(value)}\n                value={value}\n                isOptionEqualToValue={(option, value) => option.id === value.id}\n                onInputChange={(_, value) => debouncedFetchKeywordsOptions(value)}\n                renderInput={(params) => <TextField {...params} label=\"Keywords\" />}\n              />\n            )}\n          />\n        </FormControl>\n        <FormControl sx={{ m: 2, display: \"block\" }} component=\"fieldset\" variant=\"standard\">\n          {genresLoading ? (\n            <Skeleton width={300} height={480} />\n          ) : (\n            <>\n              <FormLabel component=\"legend\">Genres</FormLabel>\n              <FormGroup sx={{ maxHeight: 500 }}>\n                <Controller\n                  name=\"genres\"\n                  control={control}\n                  render={({ field }) => (\n                    <>\n                      {genres.map((genre) => (\n                        <FormControlLabel\n                          key={genre.id}\n                          control={\n                            <Checkbox\n                              value={genre.id}\n                              checked={field.value.includes(genre.id)}\n                              onChange={(event, checked) => {\n                                const valueNumber = Number(event.target.value);\n                                if (checked) {\n                                  field.onChange([...field.value, valueNumber]);\n                                } else {\n                                  field.onChange(\n                                    field.value.filter((value) => value !== valueNumber)\n                                  );\n                                }\n                              }}\n                            />\n                          }\n                          label={genre.name}\n                        />\n                      ))}\n                    </>\n                  )}\n                />\n              </FormGroup>\n            </>\n          )}\n        </FormControl>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          startIcon={<FilterAltOutlinedIcon />}\n          sx={{ m: 2 }}\n        >\n          Apply filter\n        </Button>\n      </form>\n    </Paper>\n  );\n}\n","import { useCallback, useContext, useState } from \"react\";\n\nimport MovieCard from \"./MovieCard\";\nimport { MoviesFilter } from \"./MoviesFilter\";\n\nimport { Container, Grid, LinearProgress, Typography } from \"@mui/material\";\nimport { AuthContext, anonymousUser } from \"../../AuthContext\";\nimport { useIntersectionObserver } from \"../../hooks\";\nimport {\n  MoviesFilters,\n  MoviesQuery,\n  useGetConfigurationQuery,\n  useGetMoviesQuery,\n} from \"../../api/tmdbApi\";\n\nconst initialQuery: MoviesQuery = {\n  pageNumber: 1,\n  filters: {},\n};\n\nfunction Movies() {\n  const [query, setQuery] = useState<MoviesQuery>(initialQuery);\n\n  const { data: configuration } = useGetConfigurationQuery();\n  const { data, isFetching } = useGetMoviesQuery(query);\n\n  const movies = data?.results ?? [];\n  const hasMorePage = data?.hasMorePages;\n\n  const auth = useContext(AuthContext);\n  const loggedIn = auth.user !== anonymousUser;\n\n  const onIntersect = useCallback(() => {\n    if (hasMorePage) {\n      setQuery((prevState) => ({ ...prevState, pageNumber: prevState.pageNumber + 1 }));\n    }\n  }, [hasMorePage]);\n\n  const { targetRef } = useIntersectionObserver({ onIntersect });\n\n  const formatImgUrl = (path?: string) =>\n    path && configuration ? `${configuration?.images.base_url}w780${path}` : undefined;\n\n  const handleAddFavorite = useCallback(\n    (id: number) => {\n      alert(\n        `In process! Action: ${auth.user.name} is trying to add movie${id} to his favorite list.`\n      );\n    },\n    [auth.user.name]\n  );\n\n  return (\n    <Grid container spacing={2} sx={{ flexWrap: \"nowrap\" }}>\n      <Grid item xs=\"auto\">\n        <MoviesFilter\n          onApply={(filter) => {\n            const moviesFilters: MoviesFilters = {\n              keywords: filter.keywords.map((item) => item.id),\n              genres: filter.genres,\n            };\n            setQuery({\n              pageNumber: 1,\n              filters: moviesFilters,\n            });\n          }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <Container sx={{ py: 8 }} maxWidth=\"lg\">\n          {!isFetching && !movies.length && (\n            <Typography variant=\"h6\">No movies were found that match your query.</Typography>\n          )}\n          <Grid container spacing={4}>\n            {movies.map(({ id, title, overview, popularity, backdrop_path }, index) => (\n              <Grid item key={`${id}-${index}`} xs={12} sm={6} md={4}>\n                <MovieCard\n                  id={id}\n                  title={title}\n                  overview={overview}\n                  popularity={popularity}\n                  image={formatImgUrl(backdrop_path)}\n                  enableUserAction={loggedIn}\n                  onAddFavorite={handleAddFavorite}\n                />\n              </Grid>\n            ))}\n          </Grid>\n          <div ref={targetRef}>\n            {isFetching && <LinearProgress color=\"secondary\" sx={{ mt: 3 }} />}\n          </div>\n        </Container>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Movies;\n","import { MutableRefObject, useEffect, useRef, useState } from \"react\";\n\ninterface Options {\n  threshold?: number;\n  root?: Element;\n  rootMargin?: string;\n  onIntersect?(): void;\n}\ninterface HookReturnType {\n  targetRef: MutableRefObject<null>;\n  entry?: IntersectionObserverEntry;\n}\n\nexport function useIntersectionObserver(options: Options = {}): HookReturnType {\n  const { threshold = 0, root = null, rootMargin = \"0px\", onIntersect } = options;\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\n  const targetRef = useRef(null);\n\n  useEffect(() => {\n    const currentRef = targetRef.current;\n\n    const observe = new IntersectionObserver(\n      (entries: IntersectionObserverEntry[]) => {\n        const [entry] = entries;\n\n        if (entry.isIntersecting) {\n          onIntersect?.();\n        }\n\n        setEntry(entry);\n      },\n      {\n        threshold,\n        root,\n        rootMargin,\n      }\n    );\n\n    if (currentRef) {\n      observe.observe(currentRef);\n    }\n\n    return () => {\n      if (currentRef) {\n        observe.disconnect();\n      }\n    };\n  }, [onIntersect, root, rootMargin, threshold]);\n\n  return { targetRef, entry };\n}\n"],"names":["MovieCard","_ref","id","title","overview","popularity","enableUserAction","onAddFavorite","image","_jsxs","Card","sx","height","display","flexDirection","children","_jsx","CardMedia","component","pt","CardContent","flexGrow","Typography","variant","gutterBottom","color","mt","CardActions","Button","RouterLink","to","concat","Tooltip","IconButton","onClick","FavoriteIcon","memo","MoviesFilter","onApply","keywordsQuery","setKeywordsQuery","useState","data","keywordsOptions","isLoading","keywordsLoading","useGetKeywordsQuery","skip","genres","genresLoading","useGetGenresQuery","handleSubmit","control","useForm","defaultValues","keywords","debouncedFetchKeywordsOptions","useMemo","debounce","query","Paper","m","p","onSubmit","FormControl","Controller","name","render","_ref2","field","onChange","value","Autocomplete","multiple","disablePortal","loading","options","filterOptions","x","getOptionLabel","option","_","isOptionEqualToValue","onInputChange","renderInput","params","TextField","label","Skeleton","width","_Fragment","FormLabel","FormGroup","maxHeight","_ref3","map","genre","FormControlLabel","Checkbox","checked","includes","event","valueNumber","Number","target","filter","type","startIcon","FilterAltOutlinedIcon","initialQuery","pageNumber","filters","_data$results","setQuery","configuration","useGetConfigurationQuery","isFetching","useGetMoviesQuery","movies","results","hasMorePage","hasMorePages","auth","useContext","AuthContext","loggedIn","user","anonymousUser","onIntersect","useCallback","prevState","targetRef","arguments","length","undefined","threshold","root","rootMargin","entry","setEntry","useRef","useEffect","currentRef","current","observe","IntersectionObserver","entries","isIntersecting","disconnect","useIntersectionObserver","handleAddFavorite","alert","Grid","container","spacing","flexWrap","item","xs","moviesFilters","Container","py","maxWidth","index","backdrop_path","sm","md","path","images","base_url","ref","LinearProgress"],"sourceRoot":""}